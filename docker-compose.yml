version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:13
    container_name: e2e_pipeline_postgres
    environment:
      POSTGRES_DB: pipeline_db
      POSTGRES_USER: pipeline_user
      POSTGRES_PASSWORD: pipeline_password
    volumes:
      - ./db/init/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - e2e_pipeline_network

  # Redis for caching and Airflow
  redis:
    image: redis:6-alpine
    container_name: e2e_pipeline_redis
    ports:
      - "6379:6379"
    networks:
      - e2e_pipeline_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: e2e_pipeline_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - e2e_pipeline_network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: e2e_pipeline_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - e2e_pipeline_network

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    container_name: e2e_pipeline_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - e2e_pipeline_network

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.3.3
    container_name: e2e_pipeline_airflow_web
    depends_on:
      - postgres
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://pipeline_user:pipeline_password@postgres:5432/pipeline_db
      - AIRFLOW__CORE__FERNET_KEY=92a8d94a02740f1c97728f9c2a18a8b125a237e742e3e4f5d6a7b8c9d0e1f2a3
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKEND=airflow.api.auth.backend.basic_auth
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    networks:
      - e2e_pipeline_network
    restart: always

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.3.3
    container_name: e2e_pipeline_airflow_scheduler
    depends_on:
      - postgres
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://pipeline_user:pipeline_password@postgres:5432/pipeline_db
      - AIRFLOW__CORE__FERNET_KEY=92a8d94a02740f1c97728f9c2a18a8b125a237e742e3e4f5d6a7b8c9d0e1f2a3
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    networks:
      - e2e_pipeline_network
    restart: always

  # Spark Master
  spark-master:
    image: bitnami/spark:latest
    container_name: e2e_pipeline_spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_HOST=spark-master
    ports:
      - "7077:7077"
      - "8081:8080"
    networks:
      - e2e_pipeline_network
    volumes:
      - ./spark:/opt/spark-apps
      - ./spark/batch:/opt/spark-apps/batch
      - ./spark/streaming:/opt/spark-apps/streaming

  # Spark Worker
  spark-worker:
    image: bitnami/spark:latest
    container_name: e2e_pipeline_spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - e2e_pipeline_network
    volumes:
      - ./spark:/opt/spark-apps
      - ./spark/batch:/opt/spark-apps/batch
      - ./spark/streaming:/opt/spark-apps/streaming

  # Main application service
  app:
    build: .
    container_name: e2e_pipeline_app
    depends_on:
      - postgres
      - kafka
      - minio
      - redis
      - spark-master
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://pipeline_user:pipeline_password@postgres:5432/pipeline_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - REDIS_URL=redis://redis:6379
      - SPARK_MASTER_URL=spark://spark-master:7077
      - GREAT_EXPECTATIONS_PATH=/app/governance/great_expectations
    volumes:
      - .:/app
      - ./governance/great_expectations:/app/governance/great_expectations
    networks:
      - e2e_pipeline_network

  # Great Expectations Data Quality Service
  great-expectations:
    build: .
    container_name: e2e_pipeline_great_expectations
    depends_on:
      - postgres
      - minio
    ports:
      - "8443:8443"
    environment:
      - DATA_CONTEXT_ROOT_DIR=/app/governance/great_expectations
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=pipeline_db
      - POSTGRES_USER=pipeline_user
      - POSTGRES_PASSWORD=pipeline_password
    volumes:
      - ./governance/great_expectations:/app/governance/great_expectations
    networks:
      - e2e_pipeline_network
    command: ["python", "-m", "great_expectations", "open-data-docs", "--directory", "/app/governance/great_expectations"]

  # Elasticsearch for monitoring
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: e2e_pipeline_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - e2e_pipeline_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus
    container_name: e2e_pipeline_prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - e2e_pipeline_network
    depends_on:
      - elasticsearch

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: e2e_pipeline_grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - e2e_pipeline_network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  postgres_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  e2e_pipeline_network:
    driver: bridge